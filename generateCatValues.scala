import java.io.{ File, FileWriter }
import scala.xml._
import scala.xml.parsing._

val outputFile = new File("gefCatValues.xml") //File generated by duplicate_team_different_region.scala
val gef_folder = "gef_corrected" //folder containing all the GEF articles - currently a relative path (subfolder)
val pp = new PrettyPrinter(200, 4)
var formattedXml = new StringBuilder
var articleCountries = scala.collection.SortedSet()(Ordering[String].on[Node](n => n.text))
var teamRegions = scala.collection.SortedSet()(Ordering[String].on[Node](n => n.text))

println("Extrating article countries")
var files = new File(gef_folder).listFiles filter {_.getName startsWith "contents_gef_allArticles_page" }
files foreach { file =>
  try {
    //println("Currently parsing " + file)
    print(".")
    
    val nodes = ConstructingParser.fromSource(scala.io.Source.fromFile(file)(scala.io.Codec.ISO8859), false).document.docElem
    var tmpValue = ""
    
    (nodes \ "content") foreach {  node =>
      tmpValue = (node \ "element" filter { _.attribute("key").toString contains "gef_article_country"}).text 
      if (tmpValue != "")
        articleCountries = articleCountries + <value>{ tmpValue }</value>
    }
  } catch {
    case e => println("unable to get article countries from " + file.getName + "\n" + e.printStackTrace())
  }
}

import org.apache.commons.io.FileUtils
import scala.collection.JavaConverters._

println("\n\nExtrating team regions")
files = FileUtils.listFiles(new File(gef_folder), null, true).asScala.toArray.filter( s => (s.getName startsWith "contents_gef_allContributors_page") || (s.getName startsWith "contents_gef_featured_team"))
files foreach { file =>
  try {
//    println("Currently parsing " + file)
    print(".")
    
    val nodes = ConstructingParser.fromSource(scala.io.Source.fromFile(file)(scala.io.Codec.ISO8859), false).document.docElem
    var tmpValue = ""
    
    (nodes \ "content") foreach {  node =>
      tmpValue =  (node \ "element" filter { _.attribute("key").toString contains "gef_team_region"}).text 
      if (tmpValue != "") 
        teamRegions = teamRegions + <value>{ tmpValue }</value>
    }
  } catch {
    case e => println("unable to get team region from " + file.getName + "\n" + e.printStackTrace())
  }
}

val output = new FileWriter("gefCatValues.xml")

// Print-format article countries
pp.format(<category name="gef_article_country"><values>{ articleCountries }</values></category>, formattedXml)
output.write(formattedXml.toString + "\n\n\n")

// Print-format team regions
formattedXml.delete(0, formattedXml.length)
pp.format(<category name="gef_team_region"><values>{ teamRegions }</values></category>, formattedXml)
output.write(formattedXml.toString)
output.close

println("\n\nValues extracted successfully")

